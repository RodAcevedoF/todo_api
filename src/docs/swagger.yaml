openapi: 3.0.0
info:
  title: API Documentation
  version: "1.0.0"
  description: API to manage todos, users, books and more.
  contact:
    name: Rodrigo
    email: raacevedof@gmail.com

servers:
  - url: http://localhost:4000/api
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful, returns access and refresh tokens
        400:
          description: Validation error
        401:
          description: Invalid credentials

  /auth/logout:
    post:
      tags: [Auth]
      summary: Log out the current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: Logout successful
        400:
          description: Token missing or already invalidated

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh the access token using a valid refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: New access and refresh tokens issued
        400:
          description: Missing or invalid refresh token
        500:
          description: Server error

  /auth/ping:
    get:
      tags: [Auth]
      summary: Check if the access token is valid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Token is valid
        401:
          description: Unauthorized

  /books:
    post:
      tags: [Books]
      summary: Create a new book
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                pages:
                  type: integer
                cover_image:
                  type: string
                  format: binary
                isbn:
                  type: string
                description:
                  type: string
                publisher:
                  type: string
                publish_date:
                  type: string
                  format: date
                categories:
                  type: array
                  items:
                    type: integer
                checked:
                  type: boolean
      responses:
        201:
          description: Book successfully created
        400:
          description: Validation error or failed to create

    get:
      tags: [Books]
      summary: Get a list of books for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          name: offset
          schema:
            type: integer
          required: false
      responses:
        200:
          description: List of books returned
        500:
          description: Server error

  /books/{id}:
    delete:
      tags: [Books]
      summary: Delete a book by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        204:
          description: Book deleted successfully
        404:
          description: Book not found
        500:
          description: Server error

    patch:
      tags: [Books]
      summary: Update a book by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                pages:
                  type: integer
                cover_image:
                  type: string
                  format: binary
                isbn:
                  type: string
                description:
                  type: string
                publisher:
                  type: string
                publish_date:
                  type: string
                  format: date
                categories:
                  type: array
                  items:
                    type: integer
                checked:
                  type: boolean
      responses:
        200:
          description: Book updated successfully
        400:
          description: Invalid input or no fields provided
        404:
          description: Book not found
        500:
          description: Server error
  /categories:
    post:
      tags: [Categories]
      summary: Create a new category
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        201:
          description: Category successfully created
        400:
          description: Validation error

    get:
      tags: [Categories]
      summary: Get all categories
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of categories returned
        500:
          description: Server error

  /categories/books/{bookId}:
    post:
      tags: [Categories]
      summary: Associate categories with a book
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categories:
                  type: array
                  items:
                    type: integer
      responses:
        201:
          description: Categories successfully associated
        400:
          description: Invalid request or no categories provided
        500:
          description: Server error
  /dashboard:
    get:
      tags: [Dashboard]
      summary: Get user dashboard information
      security:
        - bearerAuth: []
      responses:
        200:
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      todo:
                        type: object
                        properties:
                          lastTodoActivity:
                            type: string
                            format: date-time
                            nullable: true
                          lastTodoTitle:
                            type: string
                            nullable: true
                      book:
                        type: object
                        properties:
                          lastBookActivity:
                            type: string
                            format: date-time
                            nullable: true
                          lastBookTitle:
                            type: string
                            nullable: true
                      video:
                        type: object
                        properties:
                          lastVideoActivity:
                            type: string
                            format: date-time
                            nullable: true
                          lastVideoTitle:
                            type: string
                            nullable: true
                      lastLogin:
                        type: string
                        format: date-time
                        nullable: true
                      counts:
                        type: object
                        properties:
                          todos:
                            type: integer
                          books:
                            type: integer
                          videos:
                            type: integer
        500:
          description: Failed to load dashboard info
  /todos:
    post:
      tags: [Todos]
      summary: Create a new todo
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                deadline:
                  type: string
                  format: date
                priority:
                  type: string
                  enum: [low, medium, high]
                checked:
                  type: boolean
      responses:
        201:
          description: Todo created successfully
        400:
          description: Validation error or bad request

    get:
      tags: [Todos]
      summary: Get list of todos for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
        - in: query
          name: offset
          schema:
            type: integer
      responses:
        200:
          description: List of todos retrieved successfully
        500:
          description: Server error

  /todos/{id}:
    put:
      tags: [Todos]
      summary: Update a todo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                deadline:
                  type: string
                  format: date
                priority:
                  type: string
                  enum: [low, medium, high]
                checked:
                  type: boolean
      responses:
        200:
          description: Todo updated successfully
        400:
          description: Validation error
        404:
          description: Todo not found

    delete:
      tags: [Todos]
      summary: Delete a todo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        204:
          description: Todo deleted successfully
        404:
          description: Todo not found
        500:
          description: Server error
  /users/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        201:
          description: User registered successfully
        400:
          description: Validation error

  /users/profile:
    get:
      tags: [Users]
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile data
        401:
          description: Unauthorized

    put:
      tags: [Users]
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                nickname:
                  type: string
      responses:
        200:
          description: Profile updated successfully
        400:
          description: Validation error

  /users/credentials:
    put:
      tags: [Users]
      summary: Update sensitive user data (email or password)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        200:
          description: Sensitive data updated
        400:
          description: Validation error

  /users/profile-image:
    post:
      tags: [Users]
      summary: Upload profile image
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        200:
          description: Image uploaded successfully
        400:
          description: Upload error

  /users/delete:
    delete:
      tags: [Users]
      summary: Delete user account
      security:
        - bearerAuth: []
      responses:
        204:
          description: User deleted successfully
        401:
          description: Unauthorized
  /utils/verify:
    get:
      tags: [Utils]
      summary: Verify email using token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        302:
          description: Redirects to frontend with verification status

  /utils/verify/request:
    post:
      tags: [Utils]
      summary: Request email verification token
      security:
        - bearerAuth: []
      responses:
        200:
          description: Verification token generated
        401:
          description: Unauthorized or already verified

  /utils/password/reset/request:
    post:
      tags: [Utils]
      summary: Request password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        200:
          description: Reset instructions sent if email exists
        400:
          description: Email is required

  /utils/password/reset:
    post:
      tags: [Utils]
      summary: Reset password using token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        200:
          description: Password reset successful
        400:
          description: Invalid or expired token
  /videos:
    post:
      tags: [Videos]
      summary: Create a new video
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                url:
                  type: string
                thumbnail:
                  type: string
                  format: binary
                description:
                  type: string
                checked:
                  type: boolean
      responses:
        201:
          description: Video created successfully
        400:
          description: Validation error or bad input

    get:
      tags: [Videos]
      summary: Get videos for authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
        - name: offset
          in: query
          schema:
            type: integer
      responses:
        200:
          description: List of videos

  /videos/{id}:
    delete:
      tags: [Videos]
      summary: Delete a video by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Video deleted successfully
        404:
          description: Video not found

    patch:
      tags: [Videos]
      summary: Update a video by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                url:
                  type: string
                thumbnail:
                  type: string
                  format: binary
                description:
                  type: string
                checked:
                  type: boolean
      responses:
        200:
          description: Video updated successfully
        404:
          description: Video not found
